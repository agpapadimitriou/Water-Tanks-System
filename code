#include <SPI.h>
#include <Ethernet.h>
#include <SD.h>
#include <Time.h>
#include <EthernetUdp.h>

#define TIME_HEADER  "T"   // Header tag for serial time sync message
#define TIME_REQUEST  7    // ASCII bell character requests a time sync message 
#define FILE          "data.txt"
#define DEPTH         400
#define ID            22145
#define SAMPLING_TIME 15

//#define DEBUG 1
//#define TIME_DEB 1
//#define HTTP_DEB 1
//#define PRINT_SD
#define ESSENTIALS 1

byte mac[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
IPAddress ip(10, 160, 117, 178);
EthernetServer server(80);
EthernetClient client;

// NTP Servers:
 IPAddress timeServer(10,160,117,7); // Router NTP SERVER
// IPAddress timeServer(132, 163, 4, 102); // time-b.timefreq.bldrdoc.gov
// IPAddress timeServer(132, 163, 4, 103); // time-c.timefreq.bldrdoc.gov
// IPAddress timeServer(131,107,13,100);

const int timeZone = 3;     // Central European Time
//const int timeZone = -5;  // Eastern Standard Time (USA)
//const int timeZone = -4;  // Eastern Daylight Time (USA)
//const int timeZone = -8;  // Pacific Standard Time (USA)
//const int timeZone = -7;  // Pacific Daylight Time (USA)

time_t prevDisplay = 0; // when the digital clock was displayed

EthernetUDP Udp;
unsigned int localPort = 8888;  // local port to listen for UDP packets

File myFile;

char _reading[15];
int pump = 7;
int Echo = 8;  
int Trig = 9; 
int lastHour = 0;
int lastMin = 0;
int pumpChange = 0;
int i = 0;

bool readRequest(EthernetClient& client) {
  bool currentLineIsBlank = true;
  i = 0;
  while (client.connected()) {
    if (client.available()) {
      char c = client.read();
#ifdef HTTP_DEB 
      Serial.print(c);
#endif  
      i++;      
      if(i == 6 && c == 'f') // kill /favicon requests!!
        return false;
        
      if (c == '\n' && currentLineIsBlank) {
        return true;
      } else if (c == '\n') {
        currentLineIsBlank = true;
      } else if (c != '\r') {
        currentLineIsBlank = false;
      }
    }
  }
  
  Serial.println(F(""));
  return false;
}

int depth_measure(){
  digitalWrite(Trig, LOW); // 2μs
  delayMicroseconds(2);
  digitalWrite(Trig, HIGH); // 10μs
  delayMicroseconds(10);
  digitalWrite(Trig, LOW);
  int distance = pulseIn(Echo,HIGH); 
  distance= distance/58;  
  
  delay(200);
  return distance;

}

void(* resetFunc) (void) = 0; //declare reset function at address 0

void setup() {
  Ethernet.begin(mac, ip);
  Serial.begin(9600);
  server.begin();
  
  pinMode(4, OUTPUT);
  digitalWrite(4, HIGH);
  
  pinMode(Echo,INPUT);
  pinMode(Trig,OUTPUT);
  pinMode(pump,INPUT);
  
  pinMode(10, OUTPUT);
  digitalWrite(10, HIGH);
  
  // initialize SD card
#ifdef ESSENTIALS
  Serial.println(F("Initializing SD card..."));
#endif

  if (!SD.begin(4)) {
#ifdef ESSENTIALS
      Serial.println(F("ERROR - SD card initialization failed!"));
#endif
      resetFunc();
      return;    // init failed
  }
  
#ifdef ESSENTIALS
  Serial.println(F("SUCCESS - SD card initialized."));
#endif
  
  deleteFile();
  
  Udp.begin(localPort);
  
#ifdef ESSENTIALS
  Serial.print(F("SRAM = "));
  Serial.println(freeRam());
  Serial.println(F("waiting for sync"));
#endif
  setSyncProvider(getNtpTime);
  
  timeSetup();
  pumpChange = digitalRead(pump);
  
  delay(300);
}

int entries = 1;
long pos = 0;
int cheat = 0;

void loop() {  
  webSrvr();
  pos = 0;
  
  if (timeToRead(SAMPLING_TIME))
    writeIntoFile();
  else if(pumpChange != digitalRead(pump)){ //if pumps change state between on/off : Create another entry
    pumpChange = digitalRead(pump);
    writeIntoFile();
  }
  
#ifdef PRINT_SD
  printSD();
#endif

  delay(10);
}

void webSrvr(){ 
  client = server.available();
  pos = 0; // pos is used as a pointer in the current position of the file cursor
  if (client) {
#ifdef DEBUG
    Serial.println(F("Preparing Answer"));
#endif
    bool success = readRequest(client);
    if (success) {
        pos = 0;
        writeResponse(client);
    }
    delay(10);
    client.stop();
#ifdef DEBUG
    Serial.println(F("Answer Send"));
#endif  
  }
}

void writeIntoFile(){
  entries = findEntries() + 1; //get entries from the file in case Hell breaks loose
  writeID();
  writeDate();
  writeTime();
  
  writeDepth(DEPTH);
  writePumpOnOff();
  
  writeC();
  writeD();
  writeE();
  writeF();
 
}

void writeID(){
  myFile = SD.open(FILE, FILE_WRITE);
  
  if(myFile){
#ifdef DEBUG
    Serial.println(F("Writing ID"));
#endif
    myFile.print("~");
    myFile.print(entries);
    myFile.print("/");
    myFile.print(ID);
    myFile.print("/");
#ifdef DEBUG
    Serial.println(F("Done Writing ID"));    
#endif
 }
 else{
    Serial.println(F("Error Writing ID"));
    resetFunc();
 }
   
 myFile.close();
}

void writeDate(){
 myFile = SD.open(FILE, FILE_WRITE);
 
 if(myFile){
#ifdef DEBUG
  Serial.println(F("Writing Date"));
#endif
  myFile.print(year());
  myFile.print("-");
  myFile.print(month());
  myFile.print("-");
  myFile.print(day());
  myFile.print("/");
#ifdef DEBUG
  Serial.println(F("Done Writing Date"));
#endif
 }
 else{
   Serial.println(F("Error Writing Date"));
   resetFunc();
 }
 myFile.close();   
}

void writeTime(){
  myFile = SD.open(FILE, FILE_WRITE);
  
  if(myFile){
#ifdef DEBUG
    Serial.println(F("Writing Time"));
#endif
    myFile.print(hour());
    myFile.print(":");
    myFile.print(minute());
    myFile.print(":");
    myFile.print(second());
    myFile.print("/");
#ifdef DEBUG
    Serial.println(F("Done Writing Time"));
#endif  
  }
  else{
    Serial.println(F("Error Writing Time"));
    resetFunc();
  }
  myFile.close();
}


void writeDepth(int Depth){
  int distanceFromSurface = depth_measure();
  int waterLevel = Depth - distanceFromSurface;
  
  if(waterLevel < 0 || waterLevel > DEPTH)
    waterLevel = -1;
    
  myFile = SD.open(FILE, FILE_WRITE);
  
  if(myFile){
#ifdef DEBUG    
    Serial.println(F("Writing depth"));
#endif    
    myFile.print(waterLevel);
    myFile.print("/");
#ifdef DEBUG    
    Serial.println(F("Done writing depth"));
#endif    
  }
  else{
    Serial.println(F("Error writing depth"));
    resetFunc();
  }
   myFile.close();
}


void writePumpOnOff(){
  myFile = SD.open(FILE, FILE_WRITE);
  
  if(myFile){
#ifdef DEBUG    
    Serial.println(F("Writing Pump ON/OFF"));
#endif    
    myFile.print(digitalRead(pump));
    myFile.print("/");
#ifdef DEBUG
    Serial.println(F("Done Writing Pump ON/OFF"));
#endif  
  }
  else{
    Serial.println(F("Error Writing ON/OFF"));
    resetFunc();
  }
   myFile.close();
}


void writeC(){
  myFile = SD.open(FILE, FILE_WRITE);

  if(myFile){
#ifdef DEBUG    
    Serial.println(F("Writing C"));
#endif    
    myFile.print("-1");
    myFile.print("/");
#ifdef DEBUG    
    Serial.println(F("Done Writing C"));
#endif  
  }
  else{
    Serial.println(F("Error Writing C"));
    resetFunc();
  }
  myFile.close();  
}

void writeD(){
  myFile = SD.open(FILE, FILE_WRITE);

  if(myFile){
#ifdef DEBUG    
    Serial.println(F("Writing D"));
#endif    
    myFile.print("-1");
    myFile.print("/");
#ifdef DEBUG    
    Serial.println(F("Done Writing D"));
#endif  
  }
  else{
    Serial.println(F("Error Writing D"));
    resetFunc();
  }
  myFile.close();
}

void writeE(){
  myFile = SD.open(FILE, FILE_WRITE);

  if(myFile){
#ifdef DEBUG    
    Serial.println(F("Writing E"));
#endif    
    myFile.print("-1");
    myFile.print("/");
#ifdef DEBUG    
    Serial.println(F("Done Writing E"));
#endif  
  }
  else{
    Serial.println(F("Error Writing E"));
    resetFunc();
  }
  
  myFile.close();
}

void writeF(){
  myFile = SD.open(FILE, FILE_WRITE);

  if(myFile){
#ifdef DEBUG    
    Serial.println(F("Writing F"));
#endif    
    myFile.print("-1");
    myFile.println("!");
#ifdef DEBUG    
    Serial.println(F("Done Writing F"));
#endif  
  }
  else{
    Serial.println(F("Error Writing F"));
    resetFunc();
  }

  myFile.close();
}

int times = 1;
void encodeStreamToJsonObject(EthernetClient client){
  
  client.print("[");   
  char reading;
  int _entries = findEntries();
  pos = 0;
  int i = 0;
  
  do{
    client.print(F("{\"id\":\""));
    client.print(getReading(1, _reading));
    
    client.print(F("\",\"date\":\""));
    rewind();
    client.print(getReading(2, _reading));
   
    client.print(F("\",\"time\":\""));
    rewind();
    client.print(getReading(3, _reading));
    
    client.print(F("\",\"a\":\""));
    rewind();
    client.print(getReading(4, _reading));
    
    client.print(F("\",\"b\":\""));
    rewind();
    client.print(getReading(5, _reading));
    
    client.print(F("\",\"c\":\""));
    rewind();
    client.print(getReading(6, _reading));
    
    client.print(F("\",\"d\":\""));
    rewind();
    client.print(getReading(7, _reading));
    
    client.print(F("\",\"e\":\""));
    rewind();
    client.print(getReading(8, _reading));
    
    client.print(F("\",\"f\":\""));
    rewind();
    client.print(getReading(9, _reading));
    
    client.print(F("\"}"));
    i++;
    if(i != _entries){
      client.print(",");
    }
  }while(i != _entries);
  
  client.print("]");
#ifdef ESSENTIALS
  Serial.println(F("Done printing to Client"));
#endif

  prepareNextData();
}


void writeResponse(EthernetClient& client) {
  client.println(F("HTTP/1.1 200 OK"));
  client.println(F("Content-Type: application/json"));
  client.println(F("Connection: Keep-Alive"));
  client.println();
  
  encodeStreamToJsonObject(client);     
}

/* 
 * Returns one character from the file
 * according to the variable pos
 */ 
 
char readFromFile(){
  
  myFile = SD.open(FILE);
  char incoming;
  if(myFile) {
    myFile.seek(pos);
    incoming = myFile.read();
    pos++;
    myFile.close();
    if(myFile.peek() == EOF)
      return('*');
    return(incoming);    
  }
  else{
    Serial.println(F("Error opening the file in readFromFile()")); 
    resetFunc();
  }

  myFile.close();
}

/* 
 * This function parses a line in the file
 * and returns the entry according to the 
 * specified field from the variable num_reading
 * ex : ~4/123/500/... num_reading = 2 
 * then reading = 500
 * the character * indicates the EOF
 */

char* getReading(int num_reading, char* reading){
  int i = 0;
  char inData;
  int j = 0;  
  myFile = SD.open(FILE);
  
  do{
     //inData = readFromFile();
     
     
    if(myFile) {
      myFile.seek(pos);
      inData = myFile.read();
      pos++;
      if(myFile.peek() == EOF)
        inData = '*';   
    }
    else{
      Serial.println(F("Error opening the file in readFromFile()")); 
      resetFunc();
    }

  
  
     if(inData == '/')
        i++;
     
     else if (inData == '!')
        break;
        
     else if(i == num_reading){
       reading[j] = inData;
       j++;
       reading[j] = '\0';
     }
     else if (i > num_reading)
       break;        
  }while(inData != '*');
  
  myFile.close();
  return reading;
}

/*
 * It finds the number of entries inside
 * the file. Inside the file the entries
 * have fields that separate with the 
 * character /. The first field is the 
 * number of entry, so this function starts
 * from the end of the file and searches for 
 * the first ~ that indicates the new line
 * then the first number is the #ofEntries
 */

int findEntries(){
  myFile = SD.open(FILE);
  int _size = myFile.size();
  pos = _size;
  char inData;
  int entries = 0;
  int i = 0;
  
  if(pos == 0)
    return 0;
        
  do{
    pos--;
    myFile.seek(pos);
    inData = myFile.read();
  }while(inData != '~');
    
  char outData[5];
  do{
    inData = myFile.read();
    if(inData == '/')
      break;  
    outData[i] = inData;
    i++;
    outData[i] = '\0';
  }while(inData != '/');
  
  myFile.close();
  return(atoi(outData));
}


/* 
 * rewind is used to return the file cursor to 
 * the first position of the current line 
 * It reads the stream backwards and stops when 
 * it finds the character ~ that indicates a new entry 
 */
void rewind(){
  File myFile = SD.open(FILE);
  char incoming; 
  
  do{
    myFile.seek(pos);
    incoming = myFile.read();
    if(incoming != '~')
      pos--;
  }while(incoming != '~');
  
  myFile.close();
}


/********************************************************************************************************************************************************/
/********************************************************************************************************************************************************/
/************************************************************* DELETE WHEN DONE *************************************************************************/
/********************************************************************************************************************************************************/
/********************************************************************************************************************************************************/

void printSD(){
  File myFile = SD.open(FILE);
  char inData;
  
  do{
    inData = myFile.read();
    Serial.print(inData);
  }while(myFile.peek() != EOF);
  
  myFile.close();
  Serial.println(F(""));
}


void dummyInit(){
  int k = 0;  
    // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  myFile = SD.open(FILE, FILE_WRITE);
  while(entries < 3){
    // if the file opened okay, write to it:
    
    if (myFile) {
      Serial.print(F("Writing to data.txt..."));
      myFile.print("~");
      myFile.print(entries);
      myFile.print("/");
      myFile.print(depth_measure());
      myFile.print("/");
      myFile.print(k);
      k = k + 100;
      myFile.println("!");
      Serial.println(F("done."));
      entries++;
    } else {
      // if the file didn't open, print an error:
      Serial.println(F("Error opening data.txt in dummyInit()"));
    }
  }
  myFile.close();
  
}

int freeRam() {
  extern int __heap_start,*__brkval;
  int v;
  return (int)&v - (__brkval == 0 ? (int)&__heap_start : (int) __brkval);  
}


/********************************************************************************************************************************************************/
/********************************************************************************************************************************************************/
/****************************************************************  TIME FUNCTIONS  **********************************************************************/
/********************************************************************************************************************************************************/
/********************************************************************************************************************************************************/


/* Messages consist of the letter T followed by ten digit time (as seconds since Jan 1 1970)
 * you can send the text on the next line using Serial Monitor to set the clock to noon Jan 1 2013
 * T1357041600
 */

void timeSetup(){  
  if (timeStatus() != timeNotSet) {
    if (now() != prevDisplay) { //update the display only if time has changed
      prevDisplay = now(); 
    }
  }
  lastHour = hour();
  lastMin = minute();
#ifdef ESSENTIALS
  Serial.println(F("Done Syncing"));
#endif

}

boolean processSyncMessage() {
  unsigned long pctime;
  const unsigned long DEFAULT_TIME = 1357041600; // Jan 1 2013
  //1437132060  07/17/2015 @ 11:21am

#ifdef TIME_DEB
  setTime(1437132060);
  return true;
#else/*
  while(Serial.find(TIME_HEADER)) {
     pctime = Serial.parseInt();
     if( pctime >= DEFAULT_TIME) { // check the integer is a valid time (greater than Jan 1 2013)
       setTime(pctime); // Sync Arduino clock to the time received on the serial port
       return true;
     }
  }
  */
#endif

  return false;
}

time_t requestSync()
{
  Serial.write(TIME_REQUEST);  
  return 0; // the time will be sent later in response to serial mesg
}


/* Calculates if the time has passed by "interval" minutes and returns true in 
 * such case so the next measurement can be made
 */
boolean timeToRead(int interval){
  
  if(lastHour == hour()){
    if(lastMin + interval == minute()){
      lastHour = hour();
      lastMin = minute();
      return true;
    }
  }
  else if(lastHour < hour()){ // change of hour
    lastHour = hour();
    lastMin = minute();
    return true;
  }
  else if(lastHour > hour()){ // change of day
    lastHour = hour();
    lastMin = minute();
    return true;
  }
  
  if(entries == 1 && cheat == 0){
    cheat = 1;
    return true;
  } 
    
  return false;
}



/*-------- NTP code ----------*/

const int NTP_PACKET_SIZE = 48; // NTP time is in the first 48 bytes of message
byte packetBuffer[NTP_PACKET_SIZE]; //buffer to hold incoming & outgoing packets

time_t getNtpTime()
{
  while (Udp.parsePacket() > 0) ; // discard any previously received packets
#ifdef TIME_DEB
  Serial.println(F("Transmit NTP Request"));
#endif

  sendNTPpacket(timeServer);

  uint32_t beginWait = millis();
  while (millis() - beginWait < 1500) {
    int _size = Udp.parsePacket();
    if (_size >= NTP_PACKET_SIZE) {
#ifdef TIME_DEB
      Serial.println(F("Receive NTP Response"));
#endif
      Udp.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
      unsigned long secsSince1900;
      // convert four bytes starting at location 40 to a long integer
      secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
      secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
      secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
      secsSince1900 |= (unsigned long)packetBuffer[43];
      return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR;
    }
  }
#ifdef TIME_DEG
  Serial.println(F("No NTP Response"));
#endif

  return 0; // return 0 if unable to get the time
}

// send an NTP request to the time server at the given address
void sendNTPpacket(IPAddress &address)
{
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011;   // LI, Version, Mode
  packetBuffer[1] = 0;     // Stratum, or type of clock
  packetBuffer[2] = 6;     // Polling Interval
  packetBuffer[3] = 0xEC;  // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12]  = 49;
  packetBuffer[13]  = 0x4E;
  packetBuffer[14]  = 49;
  packetBuffer[15]  = 52;
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:                 
  Udp.beginPacket(address, 123); //NTP requests are to port 123
  Udp.write(packetBuffer, NTP_PACKET_SIZE);
  Udp.endPacket();
}


void deleteFile(){
#ifdef ESSENTIALS
  Serial.println(F("Removing data.txt..."));
#endif
  SD.remove(FILE);  
}

void createFile(){
  myFile = SD.open(FILE, FILE_WRITE);
  myFile.close();
}

/* When the response is sent to the client
 * this function is called to delete the file
 * and create a new one so the next response
 * won't be overwhelming
 */
 
void prepareNextData(){
 
  deleteFile();
  entries = 1;
  createFile();
  writeIntoFile();
  
}
